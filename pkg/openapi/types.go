// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"encoding/json"
	"fmt"

	"github.com/oapi-codegen/runtime"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

const (
	Oauth2AuthenticationScopes = "oauth2Authentication.Scopes"
)

// Defines values for FirewallRuleDirection.
const (
	Egress  FirewallRuleDirection = "egress"
	Ingress FirewallRuleDirection = "ingress"
)

// Defines values for FirewallRuleProtocol.
const (
	Tcp FirewallRuleProtocol = "tcp"
	Udp FirewallRuleProtocol = "udp"
)

// ComputeClusterMachineStatus Compute cluster machine status.
type ComputeClusterMachineStatus struct {
	// Hostname Machine hostname.
	Hostname string `json:"hostname"`

	// PrivateIP Machine private IP address.
	PrivateIP *string `json:"privateIP,omitempty"`

	// PublicIP Machine public IP address.
	PublicIP *string `json:"publicIP,omitempty"`

	// Status The provisioning state of a resource.
	Status externalRef0.ResourceProvisioningStatus `json:"status"`
}

// ComputeClusterMachinesStatus A list of Compute cluster machines status.
type ComputeClusterMachinesStatus = []ComputeClusterMachineStatus

// ComputeClusterRead Compute cluster read.
type ComputeClusterRead struct {
	Metadata externalRef0.ProjectScopedResourceReadMetadata `json:"metadata"`

	// Spec Compute cluster creation parameters.
	Spec ComputeClusterSpec `json:"spec"`

	// Status Compute cluster status.
	Status *ComputeClusterStatus `json:"status,omitempty"`
}

// ComputeClusterSpec Compute cluster creation parameters.
type ComputeClusterSpec struct {
	// RegionId The region to provision the cluster in.
	RegionId string `json:"regionId"`

	// WorkloadPools A list of Compute cluster workload pools.
	WorkloadPools ComputeClusterWorkloadPools `json:"workloadPools"`
}

// ComputeClusterStatus Compute cluster status.
type ComputeClusterStatus struct {
	// SshPrivateKey SSH private key that allows access to the cluster.
	SshPrivateKey *string `json:"sshPrivateKey,omitempty"`

	// WorkloadPools A list of Compute cluster workload pools status.
	WorkloadPools *ComputeClusterWorkloadPoolsStatus `json:"workloadPools,omitempty"`
}

// ComputeClusterWorkloadPool A Compute cluster workload pool.
type ComputeClusterWorkloadPool struct {
	// Machine A Compute cluster machine.
	Machine MachinePool `json:"machine"`

	// Name Workload pool name.
	Name string `json:"name"`
}

// ComputeClusterWorkloadPoolStatus Compute cluster workload pool status.
type ComputeClusterWorkloadPoolStatus struct {
	// Machines A list of Compute cluster machines status.
	Machines *ComputeClusterMachinesStatus `json:"machines,omitempty"`

	// Name Workload pool name.
	Name string `json:"name"`

	// Replicas Number of machines.
	Replicas int `json:"replicas"`
}

// ComputeClusterWorkloadPools A list of Compute cluster workload pools.
type ComputeClusterWorkloadPools = []ComputeClusterWorkloadPool

// ComputeClusterWorkloadPoolsStatus A list of Compute cluster workload pools status.
type ComputeClusterWorkloadPoolsStatus = []ComputeClusterWorkloadPoolStatus

// ComputeClusterWrite Compute cluster create or update.
type ComputeClusterWrite struct {
	// Metadata Resource metadata valid for all API resource reads and writes.
	Metadata externalRef0.ResourceWriteMetadata `json:"metadata"`

	// Spec Compute cluster creation parameters.
	Spec ComputeClusterSpec `json:"spec"`
}

// ComputeClusters A list of Compute clusters.
type ComputeClusters = []ComputeClusterRead

// ComputeImage The image to use for a server.
type ComputeImage struct {
	// Id The image ID.
	Id *string `json:"id,omitempty"`

	// Selector A server image selector.
	Selector *ImageSelector `json:"selector,omitempty"`
	union    json.RawMessage
}

// ComputeImage0 defines model for .
type ComputeImage0 = interface{}

// ComputeImage1 defines model for .
type ComputeImage1 = interface{}

// FirewallRule A firewall rule applied to a workload pool.
type FirewallRule struct {
	// Direction The direction of network traffic to apply the rule to.
	Direction FirewallRuleDirection `json:"direction"`

	// Port The port to allow, or start of a port range.
	Port int `json:"port"`

	// PortMax The end of a port range, inclusive of this this port, if specified.
	PortMax *int `json:"portMax,omitempty"`

	// Prefixes A list of CIDR prefixes to allow, it might be any IPv4 or IPv6 in CIDR notation.
	Prefixes []string `json:"prefixes"`

	// Protocol The protocol to allow.
	Protocol FirewallRuleProtocol `json:"protocol"`
}

// FirewallRuleDirection The direction of network traffic to apply the rule to.
type FirewallRuleDirection string

// FirewallRuleProtocol The protocol to allow.
type FirewallRuleProtocol string

// FirewallRules A list of firewall rules applied to a workload pool.
type FirewallRules = []FirewallRule

// ImageSelector A server image selector.
type ImageSelector struct {
	// Distro A distribution name.
	Distro externalRef1.OsDistro `json:"distro"`

	// Variant The operating system variant.
	Variant *string `json:"variant,omitempty"`

	// Version The operating system version to use, if not defined it will use the latest.
	Version *string `json:"version,omitempty"`
}

// KubernetesNameParameter A Compute name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type KubernetesNameParameter = string

// MachinePool A Compute cluster machine.
type MachinePool struct {
	// Disk A volume.
	Disk *Volume `json:"disk,omitempty"`

	// Firewall A list of firewall rules applied to a workload pool.
	Firewall *FirewallRules `json:"firewall,omitempty"`

	// FlavorId Flavor ID.
	FlavorId string `json:"flavorId"`

	// Image The image to use for a server.
	Image ComputeImage `json:"image"`

	// PublicIPAllocation A public IP allocation settings.
	PublicIPAllocation *PublicIPAllocation `json:"publicIPAllocation,omitempty"`

	// Replicas Number of machines for a statically sized pool or the maximum for an auto-scaled pool.
	Replicas int `json:"replicas"`

	// UserData UserData contains base64-encoded configuration information or scripts to use upon launch.
	UserData *[]byte `json:"userData,omitempty"`
}

// PublicIPAllocation A public IP allocation settings.
type PublicIPAllocation struct {
	// Enabled Enable public IP allocation.
	Enabled bool `json:"enabled"`
}

// Volume A volume.
type Volume struct {
	// Size Disk size in GiB.
	Size int `json:"size"`
}

// ClusterIDParameter A Compute name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type ClusterIDParameter = KubernetesNameParameter

// OrganizationIDParameter A Compute name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type OrganizationIDParameter = KubernetesNameParameter

// ProjectIDParameter A Compute name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type ProjectIDParameter = KubernetesNameParameter

// RegionIDParameter A Compute name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type RegionIDParameter = KubernetesNameParameter

// ComputeClusterResponse Compute cluster read.
type ComputeClusterResponse = ComputeClusterRead

// ComputeClustersResponse A list of Compute clusters.
type ComputeClustersResponse = ComputeClusters

// CreateComputeClusterRequest Compute cluster create or update.
type CreateComputeClusterRequest = ComputeClusterWrite

// PostApiV1OrganizationsOrganizationIDProjectsProjectIDClustersJSONRequestBody defines body for PostApiV1OrganizationsOrganizationIDProjectsProjectIDClusters for application/json ContentType.
type PostApiV1OrganizationsOrganizationIDProjectsProjectIDClustersJSONRequestBody = ComputeClusterWrite

// PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDJSONRequestBody defines body for PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterID for application/json ContentType.
type PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDJSONRequestBody = ComputeClusterWrite

// AsComputeImage0 returns the union data inside the ComputeImage as a ComputeImage0
func (t ComputeImage) AsComputeImage0() (ComputeImage0, error) {
	var body ComputeImage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputeImage0 overwrites any union data inside the ComputeImage as the provided ComputeImage0
func (t *ComputeImage) FromComputeImage0(v ComputeImage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputeImage0 performs a merge with any union data inside the ComputeImage, using the provided ComputeImage0
func (t *ComputeImage) MergeComputeImage0(v ComputeImage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputeImage1 returns the union data inside the ComputeImage as a ComputeImage1
func (t ComputeImage) AsComputeImage1() (ComputeImage1, error) {
	var body ComputeImage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputeImage1 overwrites any union data inside the ComputeImage as the provided ComputeImage1
func (t *ComputeImage) FromComputeImage1(v ComputeImage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputeImage1 performs a merge with any union data inside the ComputeImage, using the provided ComputeImage1
func (t *ComputeImage) MergeComputeImage1(v ComputeImage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputeImage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.Selector != nil {
		object["selector"], err = json.Marshal(t.Selector)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selector': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ComputeImage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["selector"]; found {
		err = json.Unmarshal(raw, &t.Selector)
		if err != nil {
			return fmt.Errorf("error reading 'selector': %w", err)
		}
	}

	return err
}
