// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//+egst13dwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
