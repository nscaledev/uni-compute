// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
