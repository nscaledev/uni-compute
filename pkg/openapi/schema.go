// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
