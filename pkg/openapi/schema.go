// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2Ry07L9Ny56e/jcAAP//fUXhXryuAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
