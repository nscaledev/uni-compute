// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
