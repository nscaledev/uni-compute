// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
