// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9D2/jNtL3VyH03uFavLYjO46TGDgc0s11G7TbDTbZvfe9Jk9ASyObjUSqJJWsu8h3",
	"f8B/kixT/hM723v6BHdANxZFDoczw+HMb6gvQcSynFGgUgTjL0GOOc5AAtd/RWkhJPCL80v3s/o1BhFx",
	"kkvCaDAOrmeAbDt0cd4LOgFRP+dYzoJOQHEGwbjqKOgEHH4rCIc4GEteQCcQ0QwyrDr+C4ckGAf/56Ci",
	"6cA8FQf3xQQ4BQniZ5xBRc/TUyfIcDQjFNaSadspMm+on9CyqxchlPEppuR3rGhaS229cTtnF7t8Eapz",
	"zn6FSK4l2LZrp7Xs6EXI5DDdhK2mWTuRrpsXobGg5J5x2o1SVsR3EeNwl2FC7/L76R3LgeKc3EUsyxi9",
	"k3h6BSlEkvEVMzpDAiRiCZJ4KpBkKMMymiE8xYQKiTgIVvAIBCIUyRmghPEM3ei5/v0BpwXcBJ0bKmeF",
	"QI8zoAhoxGKI0ZwVaAoS3QT/kHj694Sxvx6eR1jeFGE4GE0w/+vhecymN0HJxd8K4POKjRJPgzrHiIRM",
	"2xQ5z9VzITmh0+Cp437AnON58GRW8rcChPyOxQSMHeKAJbxhWV5IeGNsyQfTSD9mVALV/8R5npJIa8PB",
	"r0Kx6EsAn3GWp6D+mYHEMZaaokXTpCgROUTqiRWBOBgHk/DodHIIo+4phqPucDA57p4OJ8NuMhwkk2M8",
	"mmCAoBM8Mn6fMhxfMpaKYPzLlwCnKXuE+CyOOQhxiQk3v0ck5sE46Ie9k17YCw/6o+DpthMkhMMjTlPd",
	"JiYcIrvAhE5VB0EnyBmXwfgkVAoJCfmsWPNL0D8d9Pqjk16/Fx4MhsGtVlfJIpaqRYjy4KmzusN+OBqZ",
	"f7/Dn4Nx//T0tDFC2NP/OzgJOkH/WA1nKB/4RrstzbHiZJLiB8Y1J6Pjo9EJDOJucoon3eHRYdw9xYe4",
	"e9Q/PD5Kjk+Gg9FEyVKGp/pVYYVfyzwRkrNgHBSTgsoi6AQPwIWZz2DYC4fWAOi1F8H48KmUwxgSXKRS",
	"TbeYpCS6uDxLU2YkRAsHxZPUqfjT063qaDM9jxbE8V+cSDDiu6ihVmrLPdIKN6p22t6SqTGzETmjwirA",
	"wljnIDFJP9gGz9cArVaE0WuiWTUIB4fd8Lh72L/uh+Ph0Xh49O+gE8wAp3J2JbEsRDC2fypNJ1ssa0PZ",
	"Gluh6igejsIwHkEXTkdH3eFkOOzik/CkezJMJoMEH46Ow0FQbUZ6bAyD/ml83O2HSjlHYb97Eg2iLsAx",
	"hKPR5PQwAvPKA1HSQui0nEb5I8T7Vv1XXf5P0eVOIOx6f/Gsk52bXTQzu/PNZ9eqFzMm5KI72e07dRkN",
	"J8kkHITdk+PDfnfYPxl08TA66SYncDSJkqgfHYLjnCZmMDqZ4NFJ0j0dnYbd4WkSdk+G4bB7lAz7k8lx",
	"dBhHh1rGyQOWcHFp9hb1v/4mol+xUr3oBGKg136J69Wi9J9vKD8Ajn128gzF2qxBjGoPtGtTem09parN",
	"7l6t4KsVfLWCr1bwT2IFG/6ix+SJ59i8X16N3qvRezV6r0ZvL0bv9nlWT/hNXkqEjmE1TJ/Qtm+LkBmO",
	"IsglxHX76AsAmgP4DAs0AaDIvYYwjdEjSVM0AZQUaUJS5Y1iMafRjDPKCpHOezf0/7MCZXiOcpam1jk1",
	"UTbdQcYokYwjIgWqr4F+aCQFGdG8oZIh/IiJRIpNKdQdXpYD19K9LRMmOLahsee5xsC50taA0AeckvjO",
	"sivomCd3iwx1zJyweI7sK8HGe+IW0zJkecTnQ52CxBwgTP9IU6Mn2kGM26UyrWMGAlGmOE8lJvSG4nIx",
	"TSQGJQTSeGsZjBhNUhLtyHzXSwvXcSVyj0TONN0CZ4CU3iKccsDxHMFnIqT42qth6XIzEIZCTJmcAe+g",
	"QhQ4TedIzohAGWAqFPVzNMMPsDiPbTmfMD4hcQx0N9aX3bTwvhDAUcQhBioJTgWKmRakcgKlACnDTFKY",
	"gvhjNOIRCxQDJRCjyRzhQs4Yt25Xx/Ifz5Wti3AhTCNF/0JDZaPugboZKju2MEcRsVxnFRCm6OzyolQ0",
	"zSalZfRvFW9uKIUIhMB8XuMOYiY3oa1lDBzlKZYJ49m2EkCoBE5xegX8Afg/FX92kwWhO7Kc9ouDtTiS",
	"IcOoKMUk+7rrfUZRQeFzDpHaxBhHBZ1hGiuy9DuIRVHBOcQ9dF1bdYwkx1QQoNK2wzS+oeqpKKIIVF8U",
	"KVMj+byH0EVihIboJVULFmEBHZSngIUSCeV8IiIRFkoYiBDF1jpMmfyeFTTebdkok3eJ6qZlzWobAcSV",
	"KS33BG04v+4aftT+qxKjhNAYVQZ+Ww4W1Okv7MhF5RYJcWcsSNtGVMiZsoOmN7v9fmXp95HgrJCZg1VN",
	"5fDB51zZLQ9XzfFveXxrA8wh4QWO3v3T47Ab9rth/zoMx/r//3ZHhlN8Eo0Oj8PuMFQH43iIu6cxDrvH",
	"o+OTOBmGUXwaVyfsaW/Ym5HpLIOsh/th2OtPe/1wOqkfcqO8+B5nJJ0H4+CCSkjR/wNG0WWKJaFFhk76",
	"o/AafXN1P0/xPXwbdNQbIhgPO+r0dh+MB2EnmOaF6itlUxLh9A0rFBMGnSCDjPF5MB4NO0HGYkj1IEIS",
	"Gkn07mJwFKpDx2wuaq/11SGQxlrizt6dK1pdN4eDLQ4az1nM1acR22h7UdEnuBcL0gy6g8F1fzAOh+P+",
	"YSkpeDRMTgej0+7hCMLu8LA/6E5O4n73aBCfHsZHo9PJcS0WU0yKwSAcdh/6vcFRb9Sd5kX3aHDUOznq",
	"hUfd4wjiYf9oWJcbu+QxJw+glqpsHdil1jGGs36olvgH+59BGAa3tfX9+dPF+cWZ6pbZrGYMliLKJqk6",
	"/S6HCBInrjFMCFZe2T1wqmUrJbT4HHSCB8wJVuy1G7YvsNAJBPkd3pLvgnE/7ASCJfIRc/hk2mlyKuBG",
	"MA4sa9SLD4TLAqfWI1LP3A/K1r2QiBohWi2hpg2SMywR5qBPkVgStZHYYwERq5ypNSSYx18v2ticpmQ5",
	"EhBxkEh1FIFy75BgGTzOgIODtHz8cc+RyuK++whCdvtbBhATwLLgJmHvrNzPIB8Zvxc2MFWiXRSrhcTR",
	"/YsJkF291RJkG/WCKo6tyV9Gr3igR6oNyopUkjwF9O7szcHFJcLmFfQNx3QK36IcE66BSTlWG/GMs2Jq",
	"JZMa3iDlN/Zu6PU8VxxL59XpQkOSZA25R4QLjNCp9jMRZ4WOkuulyoFLBxnSOBtf/OfNxfkHRZCeo3px",
	"CZGU4cjO3N/Du7M35TxXdPRUh3X8Yii6rSRg8itE2stcZvZPxACb2pbNvlESoZmskVgOZbVKjDyLuwTD",
	"auYc3pkFuCpjqqtBLm69TKBreXWqkGuzJzsQci28C7So7XvzMZ3P/UO9+6d6VLeNWtfCS60yQW0vtkyw",
	"DAK3vacbtL1diwi3vW+boEpjW3paNn97Z/fl8iBP9eB06xx0i9VTaOggietBeu/8GtJVrUWnklqfFnv1",
	"RbQpTGvQ26mOqOnORlq9Sl/XqrdOR67Vag44Xtbl+ka/J8mwmb6riOX6FKvFRNH4zo1V23Y3Z8qVemMh",
	"M7TFu5aTDYEqJ2/pWS8ZV5bs1ax2HlMDJrjI+SpjuQLorLZeJ+UmamOHINSr8o1k2VYYyIVXm6wqqW2O",
	"sQHPNtx22rYbIWaXxuD9CPPlbq6ufigN4j3MrUOtdklRRRDqvHtRxtUkbQ1b6q/5TEyTPY5ClDOWehS5",
	"SviuIt0204OWCdrm4P+qD4VatsaGgFib7Mi43Wr+m4rIAg9aBabKDz/D6IrK6u7AnHrOtdnBz0U2Aa52",
	"D0dorQNCJUzLmogl9pa9bsffrfawBSY/dwtbkG7llRN6YXrpr9vOfPr0bPJ324g9Mrp2NzZY8s32CNAB",
	"/zzGEr7K1uyctn3sxDvvpdus6nMX0CC1WpfswgFdljdg46NLhgphU2TInM0VJYzC+0QHShr+6e1TZ/G3",
	"EkFz+3TbXGASrxq65XhQh+Ss4oPuxNUg+fcjh3f6UKTgWwv3HPEiBaRDRiZZhtdtRjWsk2+C5WO10i6Q",
	"IDlOEhLp/vM8NelMPbJkagSgRaa5XGKnwPzj1nf00bAqb50b47I89+uEp5CYm4O5eahjHz6TXENo+XoG",
	"Gjd76SBClQSTBzDQECJsXI9x2UEkQUpXSEIgbhmwxICtUJWL8w/INaxNjUiUkelM6nQhnaOLy4ehmu/F",
	"5cMIEWreo0xaoEpn4yqvOuCspZRQP10Ir7jlk1EedIIizj3r1jAplRTVRrRrW2PN7RrRXsm8BRkXa4R8",
	"IwO0oFUe3i0qprcmUJkZawWcuvt0zATb9xh1ZOLcdPpUC8t7q1vLMJ6YCwkZsq29FquM5m/Wk2ltLe96",
	"v9OyoRrGJw5tVZ0e7v9YNjW+HXpXCKNCBpGEzn++crgjRTaj6Ryl7FFt6VgAimaY40htWR1EtacnlNLN",
	"5vkMqOhYa4NprO2FgddUL6mm5q2ObqPGlShjQqLRYa1vpb8p0Kmc9bTT/fkn/UcwHh1qX8v92fcHSMsj",
	"wAbnDhcN9Ft6b6XkthHMn2zG3iQpV7/9wNIig7qOb6OQ2n+rALHN2X+vn9itdw0bS5DsBt6I8TOe2vCv",
	"q3rwvLGH00VHI6HOrXfZQDPYJ07KBZpgAaNh15UXR4wmZFoYhCMiNGE8M/9Wu6nuSTjPqcgZRSkuaKQl",
	"1TQNxsFkLmGtbpezrK2ZY7xPzf3cbQp4LfJYtkMCpLJCntNkCU5u9vRPg/rwdVdj+YSxFDBdmpvr1jeP",
	"rZEVS7S9BQqcRBYalIEQWHkjzRwjw4WcDTxz9vd6hpTtAdurWTQEn3NMY2MKtc/2w/X1pW2i5KWHNJZL",
	"6CSnkqTYNXx/VsgZGvTCgXODIotvmxQmJ2r6BmsnFY2cgMR8bo91egCh3fOzywuBNEwRyRlWAzABlXuF",
	"JvPaeIv+ZBMqW0fh3EUpAap+bSJqCiqKXPkioN41WdY7vZSdsk8NsFMnokUomoQsZxxzks7vCoofMEmx",
	"yaC7F8tR3Q9TjqlsjKp/c0PWYVM1AGoGcsbiO/XU2t1GJxnEBLtOKvikz6n2YIiaEvIJ+ETx3UqcLQac",
	"OOSh7mH9nt4O2dtRWyo/4Cc8gfQTTgvvycfs9DVXIFXNkb5zoYNkmevUyEslfSUMTfkMNqkfYYomcEMJ",
	"jeEzxC7jrQ7JSg201mEpgasx/+uXsHt61v037v5++80/xtVf3bve7ZewM+o/1Vp8+4+/+DytLThRL+NZ",
	"Eak3O7w96+45CNFICXxp2KBmodHaW1aIBvUmBPgirn8CKaP6fo31ktcYdFncbpvpeDeDKu89mS/SpY1A",
	"DanIAW+PTF+fVHmJpdpQSpYXr1btteqymX0sWTXUc1fLUbOXhfKmob1MqJWTgAkcVLDRansq6D1lj7TM",
	"bM411mbKcVzhOr3Wepew4HLWdolvOiSWpmrfbXDMVOJwIsHjTa3cPa7rMlB7ZAHvTP+hDS8uppkSai02",
	"um5CewgZ00AqKuGz/yzqQvp70g/vfqLO/Hi6z1y7xFNzRPIlBW6ft9aXXnCAV1WrKqiNZbX+Vv1PLbMx",
	"NB7vVYhf3CgqJpDow3Io/cuSrJuqMAOc8zFXkgwWLZ8p+0hBmohgeV6KsYSuav4fgKj5w3Aly5Z/Df7j",
	"uTuCDgjutA0IyB7arvzKMJUkKiNd9cu9Hvq9Qe+wd0MvOXQ56OIMY1BthM0co3TtW8E5UJnOUenMN1zK",
	"h5ub+P/e3PRq/9nVbWyR/Zd0E1comMmhxd/N/dqlq5geZ8zm2uIFTfNuD4tQ18011g6wuca2pX4KSn4r",
	"ap23JIEyFutT7dqZm9ziBjN3Pa6ZOV6ct+1+03n78FwLLN9AX00RlFNaIhaOX/bk9WshbB2QiaLGjP5N",
	"OgW/oZjO1xT3mgjEBCgkRKKEswxh9YjGmMfkd4hvaEmCmbi5k3KXs6nEU2/EBU9RhvNc08knRHLM5+6Y",
	"ycyRVPQQup6BAFOrR5mJe+BU12gSOr2hpshvjkqd1HYEayC2BB1jUU0KAcr+AY21DJl0UqyxqsQ4XzfU",
	"+lcmR+I439GvWwi5ehRhCVMdQ0FELvuBfmzFmVMANetWaMWD/9iuhFQ/clXYEk83xq2YPm93XsJ14F/l",
	"GW6cStpSejzJpmcU1ngzwfrJV4EotHpXGwEVnjHfZ6MZnjvWFvydYA6KFE+i5l8zsMFOB7d2xhCjGGIS",
	"abtvcwC+eHSnXk7mIYmD9UneXH5Epo5n4W4v6E17SFcPVRkrHs2IhEgWvGV/zduOGbRMW7y5/NiSsnDp",
	"oeW3ccYKqvUL8hlkwHGKVGvlW739zt+bLYramzRN88JBVF0N3GpSTStNIvluAwiYZl7ZuWXHngRzdY7c",
	"1dI9y2xtZnR2tV3TvHhnihaX5/H28uOCoPbWO8EbjrbO2jdHfiEelpPfAxf9JkpNZCFHs2yrFgtKfaJv",
	"W9R0/e3lR4HK/AfCAgmA8kT0/sqvuW3qpbm9TqnK4tYVcuKvplgsffXGSmyT5gy/iTCPxbfVTP2EuVLL",
	"/UrGJ9Nr05rYwRw7anZlcaKdxYXd2d5UFHlZqNbAkFYPLNna044uMr7dVXuJH/V3Rg3m5s/m5hjA0Vfx",
	"cvRQb221sXdtTQ0yIgkiVEicpuApSnGFyms6sQGUjrvZwgpOaajaDrqQvoz5dTCWP0aPLdP2s4bvr7z6",
	"sYTWqrXwVHGWFeKr3EvVyoTwtUf5iLmcH0zUydy/gC+Me0tKj3iP3Vs3+6kqf99r9z+aTleh9uoct40M",
	"v2MQ95LlBxW4eXMAn62/b9x6VkmHHuDGFPGbjw2sPotb5pSL0NkM3fdMa7jFBrDvs0JpJ8vbFPbb9fur",
	"hTsTlrJ5hJKsyMwRSbWqgt8WtiVLGPoqT8p3D8PeJrLUuecyh33z7dNi/035dAxdIkSv4n5E89PSFJvn",
	"fiyRGqcG8asvl44B1H2n+n0XnVpEoRNgOt+TM7Xy+LjlRRcvcUAiDn+50+mo3CY8k9WGikwKHRpxkUu3",
	"BJxF98qa2WtRduZ5uaH4zLyJ1LBkyRybKDERNfxSDImuVtYXuOHoXkmQjWfXyYd4hqVO3OpLXPZA/4/l",
	"Ntik3+wBWsLrNJjbYnYe2Tz+vnbXR8sXedx1ILX76821oeaaOx3h1hg9D8Zh+fqQ5jAXiRrHOa7UROus",
	"itQGtIk9UTtY2i7NbW+MAhIzVqQaKF5Lsus4oCudclB6nSNAJCtvfkHmIhZxQ31jTrCArjYVJZLYZFOk",
	"zjRkFhZfG1URhHBF7Kefzn5GIKOF3EgbHnaJaTubU/PYXxx/Vn6T4CtW3T2nBv4ZM/46R73aWMviXYOE",
	"4wkr5MJXIJauE6lp455ZUSp6afr3PsS16rbJbQendcPvidvXdgpt1wX8TVTXcDYNaHVnUb0cZl8WdaUD",
	"UN5T9BJbe03Ld93ffe5slfi8XBDafYWBDExk6ZInXTCCcg5llKSEi7j/Oo3u+fLOtkrGB23WT5wrQEQN",
	"R6JLmQz0We0fn95ZuH4t/t+4mYH87hnjvDxVbJza0B0tK4kud40KTuT8SvHWAoN10cLizZHLVLx3V3C7",
	"s42o8P9oApgrHdE3Sy5eg6mxDCl7NKtfv033DYth6cePPA3GwUzKXIwPDgyeVc579F70oFDM0reRDXtU",
	"RDiFXsSyA0P/wcPgYKEn/cE9lus5KklWtO3Uu+5hofJXPzJ3ihGasJYbtmz91xXwBxKBBnhaqyJ0bSIp",
	"cRb2lo0lLEVKEkDRPErhhmaY4ilkQFvLuiWRKdQq5GsDL9wF2O8d9UJ9YjY6FIyDw17YOzSgp5lesAOc",
	"k4OH/kEduCwOvix+Z/PpIGqtQH/jLiOxE1UETsETUPlJGTecppWbpQ4zNnNRH0/Xizth1F9heAvyLCef",
	"+u/rRL5fILEskW98Sm4Qhm3Wp2x30PbBkadOMNzk/d3uq9ej9Pc6ivdaXD3O4V7HWb6EXA8y3OsgS7ck",
	"P3WCoz0vy6q7tOtWVeP1/Pb0l1v9HY76J4VbsH1Vk4O2T+Q+dda+uuvHVTW1G6q/BfyLgy/lR223tQlf",
	"jS+e7/fqmySYL/P8RuMQBcKIwmP9vqNFA3TJxFoLdGl5dOnGXzBJ7hOv83axrX0F9mDVJ2CflkzcYFsT",
	"92rhdrRwp3sdZOkrGv/RFu5zN2ZRoRwU/Xt3ylmR608AEY2S2odNOfhSfkP9qawM8LnO+neE21XXtHi2",
	"8r5Z+JT7tlq3y9d8XlXz1fnYVjWf6Zq/BalBkPaDpA8EHl2KslWvNvDJn6NUW3vrja9Dv8rzqzO9J6dx",
	"/VvlHtVwNQuPjn3UlR/VTlU//Zo7iyCuXSFD8dTriBb70ro/2iF93RpfTcmf2Wt1F8eKgy/2X5u6sg6j",
	"YKuo3A6MLmT5uUYOrkKPJPZLY0u3GDlQsL51lQiU6ot9zU0vulhcw1cqgPfLuM3ukth3jgevfvSrsfgT",
	"+NH/Az2T9W+VhmrRn9mT6WxPfOqLonQULiGpBGWXGqnQstZSA6BikiTAgcrSYZLzfE3qQSB7bnDLWIdV",
	"1RKuW59yPthpPecos9MHiv50hu1Pfw653VpZDr7Y7wicPx20Fp65PKCtatwoEydMKs5lFytVsKNU0Cpd",
	"Gj/DtW8D7KImH+x0vreTeXGtaX7J8FVr/nynd6cje1O1Noyu0zR31fAuilZH+b6cnl2Ymby4mjW+Avmq",
	"Zf9LtOzp6b8DAAD//+WmKPRUlwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
