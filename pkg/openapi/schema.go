// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
