// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
