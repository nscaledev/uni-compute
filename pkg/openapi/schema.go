// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
