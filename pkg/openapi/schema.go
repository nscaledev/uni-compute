// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
