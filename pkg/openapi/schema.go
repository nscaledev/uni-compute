// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ybTiy3cAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
