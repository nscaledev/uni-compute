// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
