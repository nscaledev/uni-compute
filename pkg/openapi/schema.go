// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
