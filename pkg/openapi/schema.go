// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
