// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
