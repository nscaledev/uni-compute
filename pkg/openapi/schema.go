// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
