// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
