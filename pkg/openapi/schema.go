// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
