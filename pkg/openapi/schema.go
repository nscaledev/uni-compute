// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
