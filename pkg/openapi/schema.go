// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tvQi4m9a9n9Ey+bz/w0AAP//avq/US52AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
