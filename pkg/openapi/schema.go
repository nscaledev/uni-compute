// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
