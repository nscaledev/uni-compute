// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
