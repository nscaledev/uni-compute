// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
