// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9C2/jOLLuXyF0zmKncS1HfsYxMNib6ez0BNM9HXTSfe7dSW5ASSWbG4nUkpTTnkbu",
	"bz/gQw/bkl9xMnNmjV1g0hZFFotVH4ush745AUtSRoFK4Yy/OSnmOAEJXP8riDMhgV9eXOU/q19DEAEn",
	"qSSMOmPnZgrItkOXF22n5RD1c4rl1Gk5FCfgjMuOnJbD4V8Z4RA6Y8kzaDkimEKCVcf/ySFyxs5/nJQ0",
	"nZin4uQh84FTkCB+wQmU9Dw9tZwY6ERON9CohgUhIUQsk2kmkXmrIPhfGfB5SbF56lTJk/NUPSFUwsSO",
	"nOBgSihsZJBtpxh0S+tZVHT1IixifIIp+Q0rmjZSW23cvKaLXb4I1Sln/4RAbiTYtmumtejoRcjkMNmG",
	"raZZM5F5Ny9CY0bJA+PUDWKWhfcB43CfYELv04fJPUuB4pTcByxJGL2XeHINMQSS8TUzOkcCJGIRkngi",
	"kGQowTKYIjzBhAqJOAiW8QAEIhTJKaCI8QTd6rl+P8NxBrdO65bKaSbQ4xQoAhqwEEI0ZxmagES3zt8k",
	"nnwfMfaX3kWA5W3med2hj/lfehchm9w6TZor8WRBbYmERFT0V0hO6MR5auU/YM7x3HkyK6lB4gcWEjAI",
	"yAFLeMuSNJPw1qDYJ9NIP2ZUAtV/4jSNSaC14eSfQrHomwNfcZLGoP5MQOIQS03RIigqSkQKgXpiRSB0",
	"xo7vDc78HgzdMwwDt9/1T92zvt93o3438k/x0McATst5ZPwhZji8YiwWzvjXbw6OY/YI4XkYchDiChNu",
	"fg9IyJ2x0/Hao7bX9k46Q+fpruVEhMMjjmPdJiQcArvAhE5UB07LSRmXznjkKYWEiHxVrPnV6Zx1253h",
	"qN1peyfdvnOn1VWygMVqEYLUeWqt77DjDYfm7w/4qzPunJ2dLY3gtfX/TkZOy+mcquEM5d260e4KOFac",
	"jGI8Y1xzMjgdDEfQDd3oDPtuf9AL3TPcw+6g0zsdRKejfnfoK1lK8ES/Kqzwa5knQnLmjJ3Mz6jMnJYz",
	"Ay7MfLr9tte3AKDXXjjj3lMhhyFEOIulmm7mxyS4vDqPY2YkRAsHxX6cq/jT053qaDs9DxbE8b84kWDE",
	"d1FDrdQWu7MVblTu8e0VqHlqOTAjesX2E/N8F9MLGOKzrnc26Lp+Nwrcvh+eudjzh+6g3z89xd3A6w76",
	"Tss57fSCaDAYuf2w13X7g7ORO8JR1+2PYDA69YeneOA5d1uzJ59AI2MK6LLUavjSb6GIswThnGU1/NGr",
	"LVJGhQWIhbW4AIlJ/Mk22B8hNOwQRm+IFqWu1+253qnb69x0vHF/MO4P/uG0nCngWE6vJZaZcMb2nwoJ",
	"yQ5ivwRGS6aC6ijsDz0vHIILZ8OB2/f7fRePvJE76kd+N8K94anXdcrNWo+Nods5C0/djqfAa+h13FHQ",
	"DVyAU/CGQ/+sF4B5ZUaUNhE6KaZR/AjhoaHxiHV/FKxrOcKu97eadcr10iyamd3F9rNr1IspE3LR3HY7",
	"uboM+37ke13PHZ32Om6/M+q6uB+M3GgEAz+Igk7Qg5xzmpjucOTj4Shyz4Znnts/izx31Pf67iDqd3z/",
	"NOiFQU/LOJlhCZdXZu9V/+tsI/olK9WLuUAoRcs553zKKNWmzF3NQpTr1Nl/b/kEOKxH0FAjHYSo8kBb",
	"g4Wh21bau9zdERiPwHgExiMw/nmBccnqrkFBsQ8M/nrEwSMOHnHwiIMvhYN3+wGhqEfBmAh9wl5CQ6Hh",
	"cIe7SBwEkEoIq5DZeLePplggH4Ci/DWEaYgeSRwjH1CUxRGJlc2KxZwGU84oy0Q8b9/S/8sylOA5Slkc",
	"WxPWXF/qDhJGiWQcESlQdVn0QyM8yPD8lkqG8CMmEik2xVA1i1kKXAv8rkzwcWgvY/YzoIFzpcAOoTMc",
	"k/DesstpmSf3iwzNmemzcI7sK87W2+QO0zJk1YjPpyoFkTlmmP6RpkZPtIUYt0tlWocMBKJMcZ5KTOgt",
	"xcVimiscFBGIw51lMGA0iknwTObnvTRwHZci90jkVNMtcAJI6S3CMQcczhF8JUKK114NS1c+A2EoxJTJ",
	"KfAWykSG43iO5JQIlACmQlE/R1M8g8V57Mr5iHGfhCHQ57G+6KaB95kAjgIOIVBJcCxQyLQgFRMoBEhh",
	"NYlhAuL30YhHLFAIlECI/DnCmZwybi2xluU/niusC3AmTCNF/0JDhVEPQPMZKhxbmKMIWKrdNQhTdH51",
	"WSiaZpPSMvrXkje3lEIAQmA+r3AHMeP00WgZAkdpjGXEeLKrBBAqgVMcXwOfAf+74s/zZEHojiyn68XB",
	"Io5kyDAqiDFJXne9zynKKHxNIdAOa44yOsU0VGTpdxALgoxzCNvoprLqGEmOqSBApW2HaXhL1VORBQGo",
	"vihSUCP5vI3QZWSEhuglVQsWYAEtlMaAhRIJZY8iIhEWShiIENnOOkyZ/JFlNHzeslEm7yPVTcOayQUP",
	"fwGlxZ6ggfN11/CzNmmVGEWEhqgE+F05mNFcf+GZXFRmkRD3BkGaNqJMThUOmt7s9vvK0l9HQo5CZg5W",
	"NZXBB19ThVs1XDUnwtXxLQYEjAoWw0cdDrIfY21LZWu/JzT7iuyBCA3anUHbczveaOg+zBL0nZ+ROAz/",
	"dxzMva6Lk3DYd71B7w36bhIE6LvP+kCFOp12X71lzled/9/ttr3+G/tzC7375TOKQ/Sd+u8PhGaSxEID",
	"tXn9Deq2e6M36D/OOq7t8PrDFfrAKDrPJqiPOqNxvzPun6LPN29R1+sOioEr5LbPOppi/VNnNHhzS9+y",
	"JFGmbkwojNEPHz/e3F9+OH/39+9PfMbkySyJCc1+c5fnzBmT31+df7r5/Pny4vvOEJ8NcNRzB9Hg1O33",
	"uh0XD3Hkhp43DILAPw29PuIM2VX5Xsp5p/qPaw+lmJLge7ezrzTuIg/1xxrbJA8hyj2Be8veNQihXa37",
	"CF/G1XF/KmUqxif5saw9iVmnHcKsTUWAY2gHLBkPvZF3MqPBfUwktKcyif+WYjn9/i+9H7Ue/aV3EQz7",
	"EI18cLugD6udvjvq4ZE77Jx2R8Nh3z899V6W75YX6xkvTKNncN7cFrzAHVzn7NRzvY7rdW48b6z//4/8",
	"7uAMj4Jh79Rz+95w4PbDPnbPQuy5p8PTURj1vSA8C8urtkm7356SyTSBpI07ntfuTNodb+JXb7uCNPsR",
	"JySeO2PnkkqI0f8BRtFVjCWhWYJGnaF3g767fpjH+AHeOC31hnDG/ZYTEvHgjLtey5mkmeorZhMS4Pgt",
	"yxQTui0ngYTxuTMe9ltOwkKI9SBCEhpI9OGyO/CclpNO56LyWqflzICGep85/3ChaM276XV3uF7YZzHX",
	"30HYRruLir7KebHb2q7b7d50umOvP+70CknBw3501h2eub0heG6/1+m6/ijsuINueNYLB8Mz/7RyKZv5",
	"Wbfr9d1Zp90dtIfuJM3cQXfQHg3a3sA9DSDsdwb9qtzYJQ85mYFaqqK1Y5daXzaedzy1xD/Z/3Q9z7mr",
	"rO8vXy4vLs9Vt8wGQYRgKaLMj8Fp1dwVRrm4huATrM5iD8Cpli21f3x1Ws4Mc4IVe62ZXnfD2HIE+Q3e",
	"kR+cccdrOYJF8hFz+GLaaXLKODhn7FjWqBdnhMsMx/YcpJ7lPygL54VE1AjRegk1bZCcYokwB313hCVR",
	"5qO9DCBi3RFqAwnm8eu5HZanKVmKBAQcJFIdBaAOdUiwBB6nwCGPEPz884FdFtmD+whCup0dPQkRYJlx",
	"E9+To9wvIB8ZfxBFmJQNHlSsFhIHDy8mQHb11kuQbdR2SoeWJn81GLAmklO1QUkWS5LGgD6cvz25vELY",
	"vIK+45hO4A1KMeE6UCrFyvyecpZNrGRSwxukTovtW3ozTxXH4nl5p6AjPGUlEJqI/DqUTvTpEnGW2Yir",
	"lKtHMo/A1GGLdbe+by8vPimC9BzViysBngkO7Mzre/hw/raY55qOnqpRYL8aiu5KCfD/CYE+W64y+z0x",
	"AXRNy2bfKIjQTNaBrXnQ6joxqlnclajWZefjB7MA14VzZX3MYL5e5np7dXVK38tyT3YglLeoXaBFbT/Y",
	"yTI/af9U7f6p6t5pojZvUUutgqCmFxsmWHiDmt7TDZrerriGmt63TVCpsQ09rcLfwdl9tTrIU9VL1TgH",
	"3WLTFMQeZG/amxV00wDekwiCeRDD1RQLWFF4ElZdg+WitkrxL8irZfWSoNdhR62WiiY1bXSwlSGtpcZu",
	"hSXrUGIjqOhoiI1YwgGHqwhSNS8OJI820OA6YKm+MdPCqWj8kI9V2ey3Z8q1emNrQVx613JySbKKyVt6",
	"NkvGtSV7PatzO20p1nuR82XAxJpsFbXh5wJtbojtEITWaumSr36nQPaFV5dZVVC7BY+23NyaNjUhplcG",
	"Vn+G+Wo319c/FbD7AHNrtqu9WJS3k1VevSijKpK1gS3V1+ogZZk9OYUoZSyuUdwyvmQd6baZHrSIBzmY",
	"qpdHvffYh/gLjrNV/LawnRN8txOnthWmBW41ilYZuLIHHIsSj1+FjdUYkeXp/5IlPvBqEkVFyqspkjUL",
	"UfS620rstA8uLMe+2+CCxmzcBevUcm+Kn7d/1wjwZvJ1usx2Wwton2QaYgmvsqPnFuYhNvBnb8G7rOq+",
	"C2jiSxuX7DIPz1vdt82BQjKUCevFR8baVZQwCh8jfauzZN/ePbUWfyvi/u6e7pYXmITrhm44y1QDCdfx",
	"QXeS55/Wb2uLCV7NmanbpHfVwrNOX9tqW7u80Ef8FaEq+6mTpzzM9FMW19KfP0c8iwHpCzoTkIA3bcqV",
	"ENO6FSoeK/bk1zaS4ygige4/TWMTMqJHlkyNADRLtJgUIatg/rirO2jqaNbaJG3GZXHLooNKhMTcXIOY",
	"h/qmqW4bqQTG1vUMNFzupYUIVatMZmDC74iwt6iMyxYiEVLKTiICYcOARejtGl2/vPiE8oaVqRGJEjKZ",
	"Sh2SQefo8mrWV/O9vJoNEaHmPcqkDQZsbZ2iXI3zbciD108XLrPy5ZNB6rScLExr1m1JfEspqoxo17bC",
	"mk2ivZZ5CzIuNgj5Vgi6oFU1vFtEllrYUDhpYSzHqzodM66NA15EMHFhOn2qOEFqSzMUl6ZiLiQkyLau",
	"hdzCd7JdTzZ0wWwdm69BLRvKYerEoakkQQ33fy6amlhB9CETRoVM1Ce6+OU6j+1UZDMaz1HMHpVNggWg",
	"YIo5DtSe20JUW6dCKd10nk6BipZFG0xDjRcmhLF8STU1b7V0GzWuRAkTEg17lb6V/paVQxL89b0pFDIe",
	"9lpOQmj+z079dXRlz1ijG2W5ENFSaCxAu4U4yIxTCHOHyeo5ttCT5Z6ThWvKhNBL07KOzGW9qZ7gtjg2",
	"5kPVb1C11Ql2veZ+b4O5jCd7/dszFmcJVKFpFxzRdnOZPrE8+x/1k5Kr61a/SKnYwgo09t1TU7bEuh5q",
	"3jjAQa6lg2QvrFW/FOhmn+TKKZCPBQz7bl7SI2A0IpPMBL8jQiPGE/O3MgJ0TyK3WLOUURTjjAZawUxT",
	"Z+z4cwkbIamYZWXNcsbXoVM9d5cFvHI9XbRTJqYCz5ojfpHKstzT301AYF13FZb7jMWA6crc8m7r5rFz",
	"0N0Kbe+AAieBjRpNQAisjKhlRzTDmZx2a+Zc3+s5UpAJtlezaAi+ppiGBsE1jP10c3Nlmyh5aSMd5is0",
	"5ClJCvOGH88zOUXdttfNrbfAhj77mXGcm77BwruikROQmM8tRuoBTMzc+dWlQDqCHckpVgMwAaVViPx5",
	"ZbxFM3g5i6IaoHkfxASo+nU52DKjIkuVCQXqXeOKv9dL2Sr61LHX6iS6GKUsIUkZx5zE8/uM4hkmMTZh",
	"FvmLxaj5DxOOqVwaVf+WD1mNqK3kJiQgpyy8V08t7i51kkBIcN5JGVlfdxaoCS9dlpAvwH3FdytxNpvc",
	"z4PSdQ+bTZHmaO5nakvtvViNmBsDpWLBxKo50nWOWkgWDnEdlK+kr4hQVqaOjfwIMEU+3FJCQ/ha7vIh",
	"llipgdY6LCVwNeb/+9Vzz87df2D3t7vv/jYu/+Xet+++ea1h56nS4s3f/rPOQNyBE9WkzzWOFbPD2zuG",
	"A1/+LHlwvi1h0HJa6sbKZkTne0QE+GLKlw8xo7qm1WbJWxp0VdzulmM28hmUwRH+fJEuDQKVIHYOePek",
	"pc0+sJdYqi2lZHXxKrnB6wq8HWLJyqH2Xa2cmoMsVG2sQi0TKpmGYO47yoyCcnvK6ANlj7TwOc91QNaE",
	"47AM+a9F6+dcx6669lf4pq8i41jtu0scM0manEiosabW7h43VRmoPLK5UEz/QwMvziaJEmotNjqlTlsI",
	"CdPRdlTC1/oj9Cv5WSSeHDIgQ+JJ7bWkns3dfmt9VRtBUquqZYLs1rJafav6Ty2zISw9PqgQvzgoKiaQ",
	"4NOqC+PbiqybhGETXVnHXEkSWEQ+kxEYgzQXmcV5KcQSXNX8DxB29bsFH60i/86ROdvtCPoe81nbgIBk",
	"1lRmM8FUkqC4oKsW1Jx12t12r31Lrzi4HHTengFUezFojlE6LTrjHKiM56gw5pdMytntbfi/bm/blf88",
	"12xskP2XNBPXKJjxXYY/zOu1Sye4Pk6Z9XGGC5pWuz0sxkNvr7F2gO01tsnlllHyr6zSeYPzLWGhPtVu",
	"nLnx6W4x87zHDTPHi/O23W8777o4vAWWb6GvJj82V1oiFo5f9uT1z0zYFFFz+Rsy+leZK/gtxXS+oe6D",
	"uYHwgUJECi+jkJiGmIfkNwhvaUGCmbipA/2cs6nEk9obFzxBCU5TTSf3ieSYz/NjJjNHUtFG6EZfK+s0",
	"bsrMvQeOdfo+oZNbavK/56jQSY0jWEfrS9B3LKpJJkDhH9BQy5DxgoU6oJkY4+uWWvvKuHZyzrf06zbP",
	"QD0KsISJvkNBRK7agfVhu+e5AqhZN8btzuqP7UpI9aO8QIfEk83HBxvDYvq8e/YSbnIFKMtwaw/YjtJT",
	"c9f/jITJmsiRarLkamB/kTu7/sUtAvLznjYvx26piDXr0pyIuDw/nZ5ZJ3OfP73XumBDBaew3OnmGau+",
	"nz1Zc0VeG3+gn7xKZE+jcbxVfM8e8907CGjfsXbgr485KFJqBOe/pmDvqvOUinwvwyiEkAR627YunDp3",
	"QquaMlpDEgdrUr69+oxMrt5CbU9oT9pIZwiWflIeTImEQGa8wTxKm06JtPA6vb363OBxyr17q2/jhGVU",
	"wyOkU0iA4xip1so0fvdDfW828fFg0jRJszwgPM9zXU+qaaVJJD9sESypmVd0btlxIMFcH5mR58vutets",
	"BzrP3XomafbBJCavzuPd1ecFQW1vPsNsOdqmzXp55BfiYTH5A3CxHqLURBZcbKtYtZg0Xif6tkVF199d",
	"fRaocF8hLJAAKA60H6/rNbdJvTS3NylVkcC+Rk7qM6YW09trr7psk+UZfhdgHoo35UzrCcvTqQ8rGV9M",
	"r8toYgfL2VHBlcWJthYX9tl4U1JUy0K1Boa06r2gzS9v6UICd8/VXlIfLHtOTaTXn83MMWFur2Ll6KHe",
	"2YoCtWtr6gwgEiGdaxfHUJMClhcj2NCJvf9q5TWrrOAUQNV0TwHxy8BvHoX0++ixZdph1vDjda1+rMQI",
	"VlrUZGoXVSDWmZeqlfHAaIvyEXM5P/EJow0L+MLRllFhER+we2tmP5UlLg7a/c+m03WxolWO20aG3yGI",
	"B8nSkzInYPuwUVtjY6meaSkdeoBbU6jDfJ9p/SnWMqdYhNZ2MaV7ouEOG8ChzwoFThYVUw7b9cfrhboo",
	"K85YQkmSJeaIpFqVvgsbdSeL7I11llRdrZWDTWSl85qCLYfm25fF/pflM2foCiF6FQ8jml9Wprh87scS",
	"qXGqccGV5dJ3AFXbqVrTplW5UWg5mM4PZEytPT7uWMzmJQ5IJA+ffdbpqKE6QP1ZJ2+DUtVIu7wpynuo",
	"rs8V6OBHp1VU524515LpC/v8z4Uwzz0XqtjkapZKwyzxM32xk1+b5wRyFjwoLLaFmw5AyJpbJ3PPxKKV",
	"zcS4KIioBM+FEJlsLnX0wsGDkn/rTKmSD+EUSx01oMtMHYD+n4tNfJl+s4Np/azSYOpZPXtk8/jHSjWi",
	"hkS3vGBR5es7ppy5Kb+r3Ss6QLQmwGa1wNHyMJeRGic3u6m5a7QKXhnQepVF5VhsuzRVaBkFJKYsi3Vy",
	"RSXCQ99i5vmSefqJdlAhkhS1qZApFSVuad2YPhbgaqArwtiNK89kTyQ2laQyqiII4ZLYL+/Pf0EggwXH",
	"XFMw9grTnr0ZmMf1hTTOiy8qvWKq7T71MvaY8escVCtjrYp3JR8B+yyTC9+wWil4VNHGA7OiUPRi4zr4",
	"EDeq22Vu57Hc+fAH4vaNnUJTaZG/irI8+DKAllXVqilkh0LUteZLUUntJQyTipY/1zqpM8ZLr/vVgtAe",
	"6hLLxCitlKHT2Uoo5VDc8RSxSvl/c41u1wU92BSturh6/SQ3BYioBDHp9D8Td6/2jy8fbK5IxXuxVNWF",
	"/FYzxkVxJtraMaM7WlUSneMeZJzI+bXirY1K1xkzixWtV6n4mH8aJD+ZiTL5BPmAudIRXfF6sTy3DqSJ",
	"2aNZ/WqV/7cshJUfPy9UDDbB1HLepg+iDZlilq6X2K+UDj4x9J/MuicLPekvLLNUz1FJsqLtWb3rHhbS",
	"/fUjU/WQ0Ig11AC0yYfXwGckAB1dbFFF6HxeUgT52Ao9K4E8ynRH2na/pQmmeAIJ0MZaDpLIGCplMSoD",
	"L1Qr7bRHbV0w2eqQM3Z6ba/dMxF3U71gJzglJ7POSTVqXpx8W/yw+tNJ0Fh24m2eAGonqgicQM110HsF",
	"bjiOSzNLHcWs36U6ni4SkQuj/mDUO5DnKfnS+Vgl8uMCiUVdjKVv43Y9rwl9inYnTd9Ge2o5/W3ef953",
	"dPQonYOOUluuX4/TO+g4qx9H0YP0DzrIytcbnlrO4MDLsu4bH1VU1cGi9Xj6653+ZFhZ7awxsLRscrKo",
	"Z5XP5bc2vvrcr+lrardUf5ttIk6+5ZkrO2PCq/GloLA61ZaTsjq/+VsdBCsQRhQeqzVZFgHoiomNCHRl",
	"eXSVj78ASfk3/efNYlv57P/Jum/+P61AXHdXiDsi3DMR7uygg6x83esPjHAHAo2Tb/avy4unIu+kzjbW",
	"vy/WS1rUTdNib+18m5Ph7KNWz/mM4FH3jtbFrtbFnrb3O5A6RtN+L31G4DH3oDbq1RZG9z5KtbM5fqGp",
	"Psrz0Vo+tFW4+a1ij1qyJetSDT7rvKJyp6oeb00hLwgrBYrUIb/O0swOpXW/t8V53BqPUPI/2iw90fU6",
	"/wecbvfHsdozcWFyL5cwXapcam/E9aetjZOU6MzeAMeAQvZIzbdZl2oKmxpHRZ+PwAGlpgbngc/dBRz+",
	"fWbqCu2MiXmR1yMOHnHw3xgHc2U9+VZUj3w6sfmCrCnxcpejSTX/0H7W0mSVVXLJXuBwkpe0/5DP6u3C",
	"nPY5uhzg469HnT/q/L/BMWrzWwXY7PSWKYz7Am6OrSHRZlA/x1dq3BK5V2Ip3fv3hMZibq8FjstfJz6i",
	"4xEdj+jYgI6vB3VTzEMOPmN/3vPxnkvQdKr+CfMQGZaV6J3fEeIXcj034/lP5QIeD7VHCP9DQ3jL+epS",
	"5vr63kZ/+vjVcE6wSB5xbhecu2aR/APh3HW5gEecO+LcEecacE5ifoS4bSHOfMUHCZMn+QcAOb16R3w7",
	"4tsR35rwjaVHeNsW3liKMOImNfyPgG4sPYLbEdz+vODWnBKq67Pq/ISIxBI4hMtJokUJZF3YIiRRBByo",
	"LCLN5DzdkJQlkA24zHGwWi6jkoq6s5vhk53Wi/sKLJF/XuX909+t3+2sLCffzB/qp8aConmGpK1Wu1WO",
	"ojBJinneZakKdpSy6ISuWD/FoiijzJ6jJp/sdH60k3lxrbHzOWrNn9gjlevIwVStqfZSrmn5h4ufo2jV",
	"6k0vp2eXZiYvrmZmNkct+3fTsqen/w4AAP//qQ7audm+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
