// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZrXvX75q2f8QLVsu/38AAAD//wQCnpHFmAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
