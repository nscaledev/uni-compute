// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2Xz+/wEAAP//Oaj7ruB2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
