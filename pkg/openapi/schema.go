// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
