// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
