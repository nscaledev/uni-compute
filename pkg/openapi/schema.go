// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
