// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1JcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
