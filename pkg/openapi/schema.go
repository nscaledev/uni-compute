// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
