// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"yIYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
