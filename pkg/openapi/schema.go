// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"I1IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
