// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
