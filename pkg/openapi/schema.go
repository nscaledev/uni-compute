// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"O2t2NQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
