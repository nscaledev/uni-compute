// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
